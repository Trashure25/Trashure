generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  username   String   @unique
  password   String
  firstName  String
  lastName   String
  avatarUrl  String?
  trustScore Int      @default(70)
  credits    Int      @default(0)
  manualCredits Int   @default(0) // Manually added credits (0-10000)
  role       String   @default("user") // user, admin, moderator
  isBanned   Boolean  @default(false)
  banReason  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listings   Listing[]
  favorites  Favorite[]
  // Messaging relationships
  conversationsAsUser1 Conversation[] @relation("User1Conversations")
  conversationsAsUser2 Conversation[] @relation("User2Conversations")
  messages             Message[]
  // Reporting relationships
  reportsFiled         Report[] @relation("ReporterUser")
  reportsReceived      Report[] @relation("ReportedUser")
  // Admin actions
  reportsReviewed      Report[] @relation("ReviewedByAdmin")
  // Trade offers
  tradeOffersSent      TradeOffer[] @relation("TradeOfferSender")
  tradeOffersReceived  TradeOffer[] @relation("TradeOfferReceiver")

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@index([trustScore])
  @@index([role])
  @@index([isBanned])
}

model Listing {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  category    String
  condition   String
  price       Int
  brand       String?
  size        String?
  images      String[] // JSON array of image URLs
  status      String   @default("active") // active, sold, draft
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  // Messaging relationship
  conversations Conversation[]
  // Trade offers
  tradeOffersOffered TradeOffer[] @relation("OfferedListing")
  tradeOffersRequested TradeOffer[] @relation("RequestedListing")

  @@index([userId])
  @@index([category])
  @@index([brand])
  @@index([status])
  @@index([createdAt])
  @@index([price])
  @@index([category, status])
  @@index([userId, status])
  @@index([category, brand])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
  @@index([createdAt])
}

// Messaging models
model Conversation {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  listingId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user1     User     @relation("User1Conversations", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2Conversations", fields: [user2Id], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)
  messages  Message[]
  tradeOffers TradeOffer[]

  @@unique([user1Id, user2Id, listingId])
  @@index([user1Id])
  @@index([user2Id])
  @@index([listingId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  read           Boolean  @default(false)
  createdAt      DateTime @default(now())
  
  // Relationships
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

// Reporting model
model Report {
  id          String   @id @default(uuid())
  reporterId  String   // User who filed the report
  reportedId  String   // User being reported
  reason      String   // Reason for the report
  description String?  // Additional details
  status      String   @default("pending") // pending, reviewed, resolved, dismissed
  adminNotes  String?  // Admin notes on the report
  reviewedBy  String?  // Admin who reviewed the report
  reviewedAt  DateTime? // When the report was reviewed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  reporter    User     @relation("ReporterUser", fields: [reporterId], references: [id], onDelete: Cascade)
  reported    User     @relation("ReportedUser", fields: [reportedId], references: [id], onDelete: Cascade)
  reviewer    User?    @relation("ReviewedByAdmin", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@unique([reporterId, reportedId]) // Prevent duplicate reports from same user
  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
  @@index([createdAt])
  @@index([reviewedBy])
}

// Trade Offer model
model TradeOffer {
  id              String   @id @default(uuid())
  conversationId  String
  senderId        String
  receiverId      String
  offeredListingId String? // The listing being offered by sender
  requestedListingId String // The listing being requested
  additionalCredits Int    @default(0) // Additional credits needed
  status          String   @default("pending") // pending, accepted, declined, expired
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User         @relation("TradeOfferSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User         @relation("TradeOfferReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  offeredListing  Listing?     @relation("OfferedListing", fields: [offeredListingId], references: [id], onDelete: SetNull)
  requestedListing Listing     @relation("RequestedListing", fields: [requestedListingId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
}
