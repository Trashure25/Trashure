generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        String                    @id @default(uuid())
  email                     String                    @unique
  username                  String                    @unique
  password                  String
  firstName                 String
  lastName                  String
  avatarUrl                 String?
  trustScore                Int                       @default(70)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  banReason                 String?
  credits                   Int                       @default(0)
  isBanned                  Boolean                   @default(false)
  manualCredits             Int                       @default(0)
  role                      String                    @default("user")
  conversationsAsUser1      Conversation[]            @relation("User1Conversations")
  conversationsAsUser2      Conversation[]            @relation("User2Conversations")
  favorites                 Favorite[]
  listings                  Listing[]
  messages                  Message[]
  passwordResetTokens       PasswordResetToken[]
  reportsReceived           Report[]                  @relation("ReportedUser")
  reportsFiled              Report[]                  @relation("ReporterUser")
  reportsReviewed           Report[]                  @relation("ReviewedByAdmin")
  tradeOffersReceived       TradeOffer[]              @relation("TradeOfferReceiver")
  tradeOffersSent           TradeOffer[]              @relation("TradeOfferSender")
  savedSearches             SavedSearch[]

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@index([trustScore])
  @@index([role])
  @@index([isBanned])
}

model Listing {
  id                   String         @id @default(uuid())
  userId               String
  title                String
  description          String
  category             String
  condition            String
  price                Int
  brand                String?
  size                 String?
  images               String[]
  status               String         @default("active")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  
  // Advanced search fields
  style                String?        // luxury, vintage, avant-garde, streetwear, workwear, gorpcore, sportswear, basics, western
  color                String?        // primary color
  material             String?        // cotton, leather, denim, etc.
  season               String?        // spring, summer, fall, winter
  era                  String?        // 90s, 2000s, 2010s, etc.
  releaseYear          Int?           // for sneakers and limited items
  collaboration        String?        // collaboration details
  exclusivity          String?        // limited edition, rare, exclusive, etc.
  department           String?        // menswear, womenswear, unisex
  location             String?        // country/region
  designer             String?        // specific designer name
  
  conversations        Conversation[]
  favorites            Favorite[]
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradeOffersOffered   TradeOffer[]   @relation("OfferedListing")
  tradeOffersRequested TradeOffer[]   @relation("RequestedListing")

  @@index([userId])
  @@index([category])
  @@index([brand])
  @@index([status])
  @@index([createdAt])
  @@index([price])
  @@index([category, status])
  @@index([userId, status])
  @@index([category, brand])
  @@index([style])
  @@index([color])
  @@index([material])
  @@index([season])
  @@index([era])
  @@index([releaseYear])
  @@index([department])
  @@index([location])
  @@index([designer])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
  @@index([createdAt])
}

model Conversation {
  id          String       @id @default(uuid())
  user1Id     String
  user2Id     String
  listingId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  listing     Listing?     @relation(fields: [listingId], references: [id])
  user1       User         @relation("User1Conversations", fields: [user1Id], references: [id], onDelete: Cascade)
  user2       User         @relation("User2Conversations", fields: [user2Id], references: [id], onDelete: Cascade)
  messages    Message[]
  tradeOffers TradeOffer[]

  @@unique([user1Id, user2Id, listingId])
  @@index([user1Id])
  @@index([user2Id])
  @@index([listingId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model Report {
  id          String    @id @default(uuid())
  reporterId  String
  reportedId  String
  reason      String
  description String?
  status      String    @default("pending")
  adminNotes  String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reported    User      @relation("ReportedUser", fields: [reportedId], references: [id], onDelete: Cascade)
  reporter    User      @relation("ReporterUser", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer    User?     @relation("ReviewedByAdmin", fields: [reviewedBy], references: [id])

  @@unique([reporterId, reportedId])
  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
  @@index([createdAt])
  @@index([reviewedBy])
}

model TradeOffer {
  id                 String       @id @default(uuid())
  conversationId     String
  senderId           String
  receiverId         String
  offeredListingId   String?
  requestedListingId String
  additionalCredits  Int          @default(0)
  status             String       @default("pending")
  expiresAt          DateTime
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  conversation       Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  offeredListing     Listing?     @relation("OfferedListing", fields: [offeredListingId], references: [id])
  receiver           User         @relation("TradeOfferReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  requestedListing   Listing      @relation("RequestedListing", fields: [requestedListingId], references: [id], onDelete: Cascade)
  sender             User         @relation("TradeOfferSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([used])
}



model SavedSearch {
  id          String   @id @default(uuid())
  userId      String
  name        String
  query       String
  filters     Json     // Store all search filters as JSON
  emailNotifications Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([emailNotifications])
}
